[[{"l":"Welcome","p":["Welcome to the Avvy Domains Technical Documentation.","Our goal here is to educate you, the integrator, on how Avvy Domains functions from a technical perspective and how it can be used in your project."]}],[{"l":"Name Hashing","p":["Names are identified by their hash on-chain. Publishing the preimage of the hash is optional.","A detailed explanation of the motivations behind our hashing mechanism is available in the blog post Privacy Mechanisms for Name Registrations.","We highly recommend using our client libraries to handle operations related to hashing.","We use the Circom implementation of the Poseidon hash function, initialized with three inputs.","Given a name that consists of n labels, we perform n rounds of Poseidon where the first input is the output hash from the previous round (or 0 for the first round) and the second & third inputs are derived from the current label. We refer to the second & third inputs as input signals.","Each label can consist of 62 characters in the set [a-z0-9-]. We convert a label to input signals by splitting the label into two strings of 31 characters. Each of these strings is then converted into a 248-bit string, then into an integer. The resulting integers are the input signals for the hashing function.","Users are able to register their names using only the hash. This the first of a number of privacy features which allows users to utilize the system without creating visible links of information on-chain."]},{"i":"what-are-input-signals","l":"What are Input Signals?","p":["The hashing algorithm that is used to hash the domains accepts only integer inputs. Any name consisting of n labels can be converted to a set of n * 2 input signals, which can then be used as inputs in our hashing algorithm.","Example: the name myname.mydomain.avax has 3 labels and can be converted to a set of 6 integers known as the Input Signals"]}],[{"i":"registration-privacy--revealing-a-name","l":"Registration Privacy & Revealing a Name","p":["Registrations can be made with Standard Privacy or Enhanced Privacy. At a technical level, a Standard Privacy registration means that a user published the preimage of their name to the chain while an Enhanced Privacy registration has not. That is the only difference.","We achieve this by publishing the Input Signals of a name to the Rainbow Table contract. This is known as Revealing a Name.","Any user can publish the Input Signals for a name as long as the signals correspond to the hash provided."]},{"l":"Finding the preimage of a hash","p":["Client applications can query the Rainbow Table with a hash. If the preimage hash been published to the Rainbow Table it will be returned in the Input Signal format. The client application can then decode the Input Signals into the ascii name.","We recommend using the provided client libraries to handle these tasks."]}],[{"i":"records--record-types","l":"Records & Record Types","p":["A .avax domain is a type of database. Users can use the system to link pieces of information to their .avax name. We call these pieces of information Records.","A client of the system will usually have one of two goals:","Given a .avax name, let me find an associated Record","Given a Record, let me find the associated .avax name","These two operations are the core of our system. The operations are referred to as Forward Resolution and Reverse Resolution, respectively.","You can think of Avvy Domains as a key-value database, where the key is either a number or a string and the value is any string."]},{"l":"Record Types","p":["Avvy Domains supports two types of Records:","Standard Records are identified by a number & accompanied by a specification. A list of Standard Records is maintained in our Client Common library.","Custom Records are identified by a string & have no formal specification. Users of the system are free to define their own specifications or use the tool however they wish."]}],[{"l":"Forward Resolution","p":["Forward Resolution includes the use of two contracts:","The ResolverRegistry tracks which Resolver should be used to resolve values for a given name. Users can define custom Resolvers or use pre-built ones.","The Resolver responds to the actual query for the value.","We recommend using our client SDKs to perform forward resolution.","Clients perform forward resolution as follows:","Calculate the hash of the name","Call the get(uint256 name, uint256 hash) method on the ResolverRegistry to retrieve the address of the Resolver","Call the resolve(uint256 datasetId, uint256 hash, string memory key) or the resolveStandard(uint256 datasetId, uint256 hash, uint256 key) method on the Resolver(identified by the address returned in step 2) to retrieve the final value."]}],[{"l":"Client SDKs","p":["We offer client SDKs in various languages to handle the complexities of interacting with the Avvy Domains smart contracts.","Language","Package","Javascript","@avvy/client(NPM)","Don't see your language on the list? Get in touch with us."]}]]